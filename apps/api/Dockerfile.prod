# ========================================
# ATENDECHAT 2.0 - API PRODUÇÃO
# ========================================
# Multi-stage build para otimizar tamanho da imagem

# ========================================
# STAGE 1: BUILD
# ========================================
FROM node:18-alpine AS builder

# Instalar pnpm
RUN npm install -g pnpm

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY package.json pnpm-lock.yaml ./
COPY apps/api/package.json ./apps/api/
COPY pnpm-workspace.yaml ./

# Instalar dependências
RUN pnpm install --frozen-lockfile

# Copiar código fonte
COPY apps/api ./apps/api
COPY packages ./packages

# Build da aplicação
WORKDIR /app/apps/api
RUN pnpm build

# ========================================
# STAGE 2: PRODUÇÃO
# ========================================
FROM node:18-alpine AS production

# Instalar dependências necessárias
RUN apk add --no-cache curl

# Criar usuário não-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos necessários do builder
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/package.json ./
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/prisma ./prisma

# Criar diretórios necessários
RUN mkdir -p uploads logs && chown nestjs:nodejs uploads logs

# Mudar para usuário não-root
USER nestjs

# Expor porta
EXPOSE 8080

# Variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/api/v1/health || exit 1

# Comando de inicialização
CMD ["node", "dist/main"]

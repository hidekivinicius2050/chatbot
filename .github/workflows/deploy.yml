name: 🚀 Deploy Produção

on:
  push:
    branches: [main, master]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # BUILD & PUSH IMAGES
  # ========================================
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 🔑 Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build & Push Web
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          file: ./apps/web/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🏗️ Build & Push API
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🏗️ Build & Push Worker
        uses: docker/build-push-action@v5
        with:
          context: ./apps/worker
          file: ./apps/worker/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================================
  # DEPLOY PRODUÇÃO
  # ========================================
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          
      - name: 🔐 Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
      - name: 🚀 Deploy no VPS
        run: |
          # Atualizar .env.production no servidor
          scp env.production.example ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/atendechat/.env.production
          
          # Executar deploy via SSH
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/atendechat
            
            # Backup do .env atual
            if [ -f .env.production ]; then
              cp .env.production .env.production.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Atualizar .env.production
            cp env.production.example .env.production
            
            # Fazer login no GHCR
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull das novas imagens
            docker compose -f compose.prod.yml pull
            
            # Rolling update sem downtime
            docker compose -f compose.prod.yml up -d --no-deps --scale api=2 --scale worker=2
            
            # Aguardar health checks
            sleep 30
            
            # Verificar saúde dos serviços
            docker compose -f compose.prod.yml ps
            
            # Remover containers antigos
            docker compose -f compose.prod.yml up -d
            
            # Limpar imagens não utilizadas
            docker image prune -f
            
            echo "✅ Deploy concluído com sucesso!"
          EOF
          
      - name: 🔍 Verificar deploy
        run: |
          # Aguardar um pouco para estabilização
          sleep 60
          
          # Verificar endpoints principais
          curl -f https://api.seudominio.com/api/v1/health || exit 1
          curl -f https://app.seudominio.com/api/health || exit 1
          
      - name: 📊 Notificar sucesso
        if: success()
        run: |
          echo "🎉 Deploy em produção concluído com sucesso!"
          echo "🌐 Frontend: https://app.seudominio.com"
          echo "🔌 API: https://api.seudominio.com"
          echo "📈 Métricas: https://prometheus.seudominio.com"
          echo "📊 Grafana: https://grafana.seudominio.com"
          
      - name: 🚨 Notificar falha
        if: failure()
        run: |
          echo "❌ Deploy em produção falhou!"
          echo "🔍 Verificar logs no VPS:"
          echo "ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
          echo "cd /opt/atendechat && docker compose -f compose.prod.yml logs"

  # ========================================
  # ROLLBACK (se necessário)
  # ========================================
  rollback:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    
    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          
      - name: 🔐 Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
      - name: 🔄 Executar rollback
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/atendechat
            
            echo "🔄 Executando rollback..."
            
            # Restaurar .env anterior
            if [ -f .env.production.backup.* ]; then
              LATEST_BACKUP=$(ls -t .env.production.backup.* | head -1)
              cp "$LATEST_BACKUP" .env.production
              echo "✅ .env.production restaurado de $LATEST_BACKUP"
            fi
            
            # Restart dos serviços
            docker compose -f compose.prod.yml restart
            
            # Verificar saúde
            sleep 30
            docker compose -f compose.prod.yml ps
            
            echo "✅ Rollback concluído!"
          EOF
          
      - name: 📢 Notificar rollback
        run: |
          echo "🔄 Rollback executado automaticamente devido a falha no deploy"
          echo "🔍 Verificar logs e investigar problema"
